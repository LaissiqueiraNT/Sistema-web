DOCUMENTAÇÃO ESTUDOS
https://expressjs.com/
https://www.npmjs.com/package/bcrypt
https://www.postgresql.org/docs/
https://www.alura.com.br/artigos/o-que-e-json-web-tokens?srsltid=AfmBOoqzZ62Otpf-1noDQbmP5GwuCTeu7u6Aq2kb5AVmDbGIXcdptHF5


------------------------------------------------------

Criar uma api simples


npm init -y
npm install pg
npm install express pg cors
node server.js

-----------------------------------------------------

const express = require('express');
const { Client } = require('pg');
const cors = require('cors');

const app = express();
const port = 3000;

app.use(cors());  // Permite requisições de qualquer origem (por exemplo, de localhost)

const client = new Client({
  user: 'seu_usuario',
  host: 'localhost',
  database: 'seu_banco_de_dados',
  password: 'sua_senha',
  port: 5432,
});

client.connect();

app.get('/dados', async (req, res) => {
  try {
    const result = await client.query('SELECT * FROM sua_tabela');
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(port, () => {
  console.log(`API rodando na porta ${port}`);
});

const express = require('express');
const app = express();
const bcrypt = require('bcrypt');  // Para criptografar as senhas
const { Pool } = require('pg');  // Para interagir com o PostgreSQL

app.use(express.json());

// Conexão com o banco de dados PostgreSQL
const pool = new Pool({
    user: 'seu_usuario',
    host: 'localhost',
    database: 'seu_banco_de_dados',
    password: 'sua_senha',
    port: 5432
});

----------------------------------------------

PM2

npm install pm2 -g
MANTEM A API LIGADA SEMPRE

----------------------------------------------

nodemailer manda emails

----------------------------------------------

ADMINISTRADOR

const verificarAdmin = (req, res, next) => {
    const { cargo } = req.user; // Supondo que você usa um middleware para adicionar o usuário ao req

    if (cargo !== 'admin') {
        return res.status(403).json({ error: 'Acesso negado. Apenas administradores podem acessar.' });
    }

    next();
};

app.get('/admin', verificarAdmin, (req, res) => {
    res.json({ message: 'Bem-vindo à área de administrador!' });
});

--------------------------------------------------------------------

JWT- GERA TOKEN
npm install jsonwebtoken

 const payload = { userId: user.id, username: user.nome_usuario };                      // Dados que você quer incluir no token
        const secret = 'seu_segredo_super_secreto'; // Defina um segredo seguro
        const options = { expiresIn: '1h' };  // O token expira em 1 hora

        const token = token.sign(payload, secret, options);  // Gerar o token
Como surgiu o JWT?
Ele faz parte de uma família de especificações: a família JOSE.

JOSE significa JSON Object Signing and Encryption, em português Assinatura e criptografia de objetos JSON. O JWT faz parte dessa família de especificações e representa o token. Abaixo, você confere outras especificações desta família:

JWT (JSON Web Tokens): representa o token propriamente dito;
JWS (JSON Web Signature): representa a assinatura do token;
JWE (JSON Web Encryption): representa a assinatura para criptografia do token;
JWK (JSON Web Keys): representa as chaves para a assinatura;
JWA (JSON Web Algorithms): representa os algoritmos para assinatura do token.

---------------------------------------------------------------------


const jwt = require('jsonwebtoken');

function verifyToken(req, res, next) {
    const token = req.header('Authorization')?.split(' ')[1]; // Pega o token no header

    if (!token) {
        return res.status(403).json({ error: 'Acesso negado' });
    }

    try {
        const decoded = jwt.verify(token, 'seu_segredo_super_secreto'); // Verifica o token
        req.user = decoded; // Armazena os dados do usuário no objeto `req`
        next(); // Chama o próximo middleware ou rota
    } catch (err) {
        return res.status(400).json({ error: 'Token inválido' });
    }
}

// Usando o middleware nas rotas protegidas
app.get('/protected-route', verifyToken, (req, res) => {
    res.json({ message: 'Conteúdo protegido', user: req.user });
});


-----------------------------------------------------------------------
PEGAR CHAVE

const crypto = require('crypto');
const chaveSecreta = crypto.randomBytes(64).toString('hex');  // Gerar uma chave aleatória de 64 bytes
console.log(chaveSecreta);
